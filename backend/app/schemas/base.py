#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pydantic import BaseModel, ConfigDict, EmailStr, validate_email
from pydantic_extra_types.phone_numbers import PhoneNumber

# 사용자 정의 검증 오류 메시지는 검증 예상 내용(즉, 입력 내용)을 포함하지 않으며, 지원되는 예상 내용 필드는 다음 링크를 참조하십시오.
# https://github.com/pydantic/pydantic-core/blob/a5cb7382643415b716b1a7a5392914e50f726528/tests/test_errors.py#L266
# 예상 내용 필드를 대체하는 방법은 다음 링크를 참조하십시오.
# https://github.com/pydantic/pydantic/blob/caa78016433ec9b16a973f92f187a7b6bfde6cb5/docs/errors/errors.md?plain=1#L232
CUSTOM_VALIDATION_ERROR_MESSAGES = {
    "arguments_type": "인수 유형 입력 오류",
    "assertion_error": "단언문 실행 오류",
    "bool_parsing": "불린 값 입력 구문 분석 오류",
    "bool_type": "불린 값 유형 입력 오류",
    "bytes_too_long": "바이트 길이 입력이 너무 깁니다",
    "bytes_too_short": "바이트 길이 입력이 너무 짧습니다",
    "bytes_type": "바이트 유형 입력 오류",
    "callable_type": "호출 가능한 객체 유형 입력 오류",
    "dataclass_exact_type": "데이터 클래스 인스턴스 유형 입력 오류",
    "dataclass_type": "데이터 클래스 유형 입력 오류",
    "date_from_datetime_inexact": "날짜 구성 요소 입력이 0이 아닙니다",
    "date_from_datetime_parsing": "날짜 입력 구문 분석 오류",
    "date_future": "날짜 입력이 미래가 아닙니다",
    "date_parsing": "날짜 입력 유효성 검사 오류",
    "date_past": "날짜 입력이 과거가 아닙니다",
    "date_type": "날짜 유형 입력 오류",
    "datetime_future": "날짜 및 시간 입력이 미래 시간이 아닙니다",
    "datetime_object_invalid": "날짜 및 시간 입력 개체가 유효하지 않습니다",
    "datetime_parsing": "날짜 및 시간 입력 구문 분석 오류",
    "datetime_past": "날짜 및 시간 입력이 과거 시간이 아닙니다",
    "datetime_type": "날짜 및 시간 유형 입력 오류",
    "decimal_max_digits": "소수 자릿수 입력이 너무 많습니다",
    "decimal_max_places": "소수 자릿수 입력 오류",
    "decimal_parsing": "소수 입력 구문 분석 오류",
    "decimal_type": "소수 유형 입력 오류",
    "decimal_whole_digits": "소수 자릿수 입력 오류",
    "dict_type": "사전 유형 입력 오류",
    "enum": "열거 형 멤버 입력 오류, 허용값 {expected}",
    "extra_forbidden": "추가 필드 입력 금지",
    "finite_number": "유한한 값 입력 오류",
    "float_parsing": "부동 소수점 입력 구문 분석 오류",
    "float_type": "부동 소수점 유형 입력 오류",
    "frozen_field": "고정된 필드 입력 오류",
    "frozen_instance": "고정된 인스턴스 수정 금지",
    "frozen_set_type": "고정된 유형 입력 금지",
    "get_attribute_error": "속성 가져오기 오류",
    "greater_than": "입력 값이 너무 큽니다",
    "greater_than_equal": "입력 값이 너무 크거나 같습니다",
    "int_from_float": "정수 유형 입력 오류",
    "int_parsing": "정수 입력 구문 분석 오류",
    "int_parsing_size": "정수 입력 구문 분석 길이 오류",
    "int_type": "정수 유형 입력 오류",
    "invalid_key": "유효하지 않은 키 값 입력",
    "is_instance_of": "유형 인스턴스 입력 오류",
    "is_subclass_of": "유형 서브 클래스 입력 오류",
    "iterable_type": "반복 가능한 유형 입력 오류",
    "iteration_error": "반복 값 입력 오류",
    "json_invalid": "JSON 문자열 입력 오류",
    "json_type": "JSON 유형 입력 오류",
    "less_than": "입력 값이 너무 작습니다",
    "less_than_equal": "입력 값이 너무 작거나 같습니다",
    "list_type": "리스트 유형 입력 오류",
    "literal_error": "리터럴 값 입력 오류",
    "mapping_type": "매핑 유형 입력 오류",
    "missing": "필수 필드가 누락되었습니다",
    "missing_argument": "인수가 누락되었습니다",
    "missing_keyword_only_argument": "키워드 전용 인수가 누락되었습니다",
    "missing_positional_only_argument": "위치 전용 인수가 누락되었습니다",
    "model_attributes_type": "모델 속성 유형 입력 오류",
    "model_type": "모델 인스턴스 입력 오류",
    "multiple_argument_values": "인수 값이 너무 많습니다",
    "multiple_of": "입력 값이 배수가 아닙니다",
    "no_such_attribute": "잘못된 속성 값 할당",
    "none_required": "입력 값은 None이어야 합니다",
    "recursion_loop": "입력 반복 할당",
    "set_type": "집합 유형 입력 오류",
    "string_pattern_mismatch": "문자열 제약 조건 입력 불일치",
    "string_sub_type": "문자열 하위 유형(비 엄격 인스턴스) 입력 오류",
    "string_too_long": "문자열 입력이 너무 깁니다",
    "string_too_short": "문자열 입력이 너무 짧습니다",
    "string_type": "문자열 유형 입력 오류",
    "string_unicode": "문자열 입력이 유니코드가 아닙니다",
    "time_delta_parsing": "시간 간격 입력 구문 분석 오류",
    "time_delta_type": "시간 간격 유형 입력 오류",
    "time_parsing": "시간 입력 구문 분석 오류",
    "time_type": "시간 유형 입력 오류",
    "timezone_aware": "시간대 입력 정보가 부족합니다",
    "timezone_naive": "시간대 입력 정보 금지",
    "too_long": "입력이 너무 깁니다",
    "too_short": "입력이 너무 짧습니다",
    "tuple_type": "튜플 유형 입력 오류",
    "unexpected_keyword_argument": "예기치 않은 키워드 인수 입력",
    "unexpected_positional_argument": "예기치 않은 위치 인수 입력",
    "union_tag_invalid": "연합 유형 리터럴 값 입력 오류",
    "union_tag_not_found": "연합 유형 인수가 찾을 수 없습니다",
    "url_parsing": "URL 입력 구문 분석 오류",
    "url_scheme": "URL 입력 스키마 오류",
    "url_syntax_violation": "URL 입력 구문 오류",
    "url_too_long": "URL 입력이 너무 깁니다",
    "url_type": "URL 유형 입력 오류",
    "uuid_parsing": "UUID 입력 구문 분석 오류",
    "uuid_type": "UUID 타입 입력 오류",
    "uuid_version": "UUID 버전 타입 입력 오류",
    "value_error": "값 입력 오류",
}

CUSTOM_USAGE_ERROR_MESSAGES = {
    "class-not-fully-defined": "클래스 속성 타입이 완전히 정의되지 않음",
    "custom-json-schema": "__modify_schema__ 메서드는 V2에서 사용되지 않음",
    "decorator-missing-field": "유효하지 않은 필드 유효성 검사기가 정의됨",
    "discriminator-no-field": "판별자 필드가 모두 정의되지 않음",
    "discriminator-alias-type": "판별자 필드는 문자열 타입을 사용해야 함",
    "discriminator-needs-literal": "판별자 필드에 리터럴을 사용해야 함",
    "discriminator-alias": "판별자 필드의 별칭 정의가 일치하지 않음",
    "discriminator-validator": "판별자 필드에서 필드 유효성 검사기를 정의할 수 없음",
    "model-field-overridden": "타입 정의되지 않은 필드는 재정의할 수 없음",
    "model-field-missing-annotation": "필드 타입 정의가 누락됨",
    "config-both": "중복된 구성 항목 정의",
    "removed-kwargs": "제거된 키워드 구성 매개변수를 사용함",
    "invalid-for-json-schema": "잘못된 JSON 타입이 존재함",
    "base-model-instantiated": "기본 모델을 인스턴스화할 수 없음",
    "undefined-annotation": "타입 정의가 누락됨",
    "schema-for-unknown-type": "알 수 없는 타입 정의",
    "create-model-field-definitions": "필드 정의 오류",
    "create-model-config-base": "구성 항목 정의 오류",
    "validator-no-fields": "필드 유효성 검사기에 필드가 지정되지 않음",
    "validator-invalid-fields": "필드 유효성 검사기 필드 정의 오류",
    "validator-instance-method": "필드 유효성 검사기는 클래스 메서드여야 함",
    "model-serializer-instance-method": "직렬화기는 인스턴스 메서드여야 함",
    "validator-v1-signature": "V1 필드 유효성 검사기 오류, 사용되지 않음",
    "validator-signature": "필드 유효성 검사기 서명 오류",
    "field-serializer-signature": "필드 직렬화기 서명이 인식할 수 없음",
    "model-serializer-signature": "모델 직렬화기 서명이 인식할 수 없음",
    "multiple-field-serializers": "필드 직렬화기가 중복으로 정의됨",
    "invalid_annotated_type": "잘못된 타입 정의",
    "type-adapter-config-unused": "타입 어댑터 구성 항목 정의 오류",
    "root-model-extra": "루트 모델에 추가 필드를 정의할 수 없음",
}


class CustomPhoneNumber(PhoneNumber):
    default_region_code = "CN"


class CustomEmailStr(EmailStr):
    @classmethod
    def _validate(cls, __input_value: str) -> str:
        return None if __input_value == "" else validate_email(__input_value)[1]


class SchemaBase(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
